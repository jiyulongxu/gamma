{"version":3,"file":"main.js","sources":["../src/Renderer/link.ts","../src/Renderer/hover.ts","../src/Renderer/index.ts","../src/Renderer/node.ts","../src/Renderer/legend.ts","../src/forceManager.ts","../src/gamma.ts","../src/setting.ts","main.ts"],"sourcesContent":["import {SimulationLinkDatum} from 'd3';\r\nimport { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\nconst renderLink = (\r\n  source: GammaNode,\r\n  target: GammaNode,\r\n  ctx: CanvasRenderingContext2D,\r\n  setting: Setting\r\n) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(source.x, source.y)\r\n  ctx.lineTo(target.x, target.y)\r\n  ctx.closePath();\r\n  ctx.strokeStyle = source.linkColor || '#ccc';\r\n  ctx.stroke()\r\n};\r\n\r\nexport default renderLink;\r\n","import { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\ninterface RenderHoverConfig {\r\n  label?: boolean;\r\n}\r\n\r\nconst renderHover = (\r\n  node: GammaNode,\r\n  context: CanvasRenderingContext2D,\r\n  transform: d3.ZoomTransform,\r\n  setting: Setting,\r\n  RenderHoverConfig: RenderHoverConfig = { label: true }\r\n) => {\r\n  const nodeSize = node.size || setting('nodeSize');\r\n  const hoverNodeColor = node.color || setting('hoverNodeColor');\r\n  const hoverLabelColor = setting('hoverLabelColor');\r\n  const hoverLabel = setting('hoverLabel');\r\n  context.beginPath();\r\n  context.arc(node.x, node.y, nodeSize + 1, 0, 2 * Math.PI);\r\n  context.closePath();\r\n  context.fillStyle = hoverNodeColor;\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 0;\r\n  context.shadowBlur = 8;\r\n  context.shadowColor = '#666';\r\n  context.fill();\r\n  if(RenderHoverConfig.label) {\r\n    const text = node[hoverLabel] as string;\r\n    if (text) {\r\n      const fontSize = 14 / transform.k;\r\n      context.font = `${fontSize}px sans-serif`;\r\n      context.fillStyle = hoverLabelColor;\r\n      context.fillText(text, node.x + nodeSize + 2, node.y + fontSize / 3);\r\n    }\r\n  }\r\n};\r\n\r\nexport default renderHover;\r\n","import {\r\n  Selection,\r\n  zoom,\r\n  zoomIdentity,\r\n  event,\r\n  select,\r\n  D3ZoomEvent\r\n} from 'd3';\r\nimport renderNode from './node';\r\nimport renderLink from './link';\r\nimport renderHover from './hover';\r\nimport renderLegend from './legend';\r\nimport ForceManager from '../forceManager';\r\nimport { GammaGraph, GammaNode, legendItem } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\ntype ContextKeys = 'hover' | 'scene';\r\n\r\ntype Contexts = { [key in ContextKeys]?: CanvasRenderingContext2D };\r\n\r\ninterface RenderOption {\r\n  width?: number;\r\n  height: number;\r\n  legend?: legendItem[]\r\n}\r\n\r\nclass Renderer {\r\n  private canvas: Selection<HTMLCanvasElement, string, HTMLElement, any>;\r\n  private zoom = zoom<HTMLCanvasElement, string>()\r\n    .scaleExtent([0.1, 4])\r\n    .on('zoom', this.zooming.bind(this));\r\n  private contexts: Contexts = {};\r\n  private transfrom = zoomIdentity;\r\n  private hoveredNode: GammaNode = null;\r\n  private hoveredTargets: GammaNode[] = [];\r\n  private width!: number;\r\n\r\n  constructor(\r\n    private manager: ForceManager,\r\n    private setting: Setting,\r\n    container: string,\r\n    private option: RenderOption\r\n  ) {\r\n    const defaultWidth = parseInt(select(container).style('width'));\r\n    this.width = option.width || defaultWidth\r\n    this.canvas = select(container)\r\n      .append('div')\r\n      .attr('class', 'gamma-container')\r\n      .style('position', 'relative')\r\n      .selectAll('canvas')\r\n      .data(['gamma-scene', 'gamma-hover'])\r\n      .enter()\r\n      .append('canvas')\r\n      .style('position', 'absolute')\r\n      .style('top', 0)\r\n      .style('left', 0)\r\n      .attr('width',this.width)\r\n      .attr('height', option.height)\r\n      .attr('class', function(d) {\r\n        return d;\r\n      })\r\n      .call(this.zoom);\r\n\r\n    this.canvas\r\n      .filter(item => item === 'gamma-hover')\r\n      .on('mousemove', () => {\r\n        const { x, y, k } = this.transfrom;\r\n        const { layerX, layerY, type } = event;\r\n        const [graphX, graphY] = [(layerX - x) / k, (layerY - y) / k];\r\n        const nearestNode = manager.find(graphX, graphY);\r\n        if ((graphX - nearestNode.x) ** 2 + (graphY - nearestNode.y) ** 2 < 9) {\r\n          this.hoveredTargets = this.manager.graph.links\r\n            .filter(link => {\r\n              return link.source === nearestNode;\r\n            })\r\n            .map(link => link.target as GammaNode);\r\n\r\n          this.hoveredNode = nearestNode;\r\n          this.renderHover();\r\n        } else {\r\n          this.hoveredNode = null;\r\n          this.hoveredTargets = [];\r\n          this.clear('hover');\r\n        }\r\n      });\r\n\r\n    const [scene, hover] = this.canvas.nodes().map(cvs => cvs.getContext('2d'));\r\n    this.contexts.scene = scene;\r\n    this.contexts.hover = hover;\r\n    this.zoom.translateBy(this.canvas, this.width / 2, option.height / 2);\r\n\r\n    manager.on('tick', () => {\r\n      this.render();\r\n      this.hoveredNode && this.renderHover();\r\n    });\r\n\r\n    window.addEventListener('resize', () => {\r\n      const width = parseInt(select(container).style('width'))\r\n      this.zoom.translateBy(this.canvas, (width - this.width) / 2, 0);\r\n      this.width = option.width || width;\r\n      this.canvas.attr('width', this.width);\r\n      this.render();\r\n    })\r\n  }\r\n\r\n  zooming() {\r\n    this.transfrom = (event as D3ZoomEvent<HTMLCanvasElement, any>).transform;\r\n    if (!this.manager.simulationIsRuning) {\r\n      this.render();\r\n    }\r\n    this.hoveredNode && this.renderHover();\r\n  }\r\n\r\n  setTransfrom(ctx: CanvasRenderingContext2D) {\r\n    const { x, y, k } = this.transfrom;\r\n    ctx.translate(x, y);\r\n    ctx.scale(k, k);\r\n  }\r\n\r\n  renderHover() {\r\n    this.clear('hover');\r\n    this.contexts.hover.save();\r\n    this.setTransfrom(this.contexts.hover);\r\n    this.hoveredTargets.forEach(node => {\r\n      renderLink(\r\n        { ...this.hoveredNode, linkColor: 'pink' },\r\n        node,\r\n        this.contexts.hover,\r\n        this.setting\r\n      );\r\n      renderHover(\r\n        { ...node, color: 'pink' },\r\n        this.contexts.hover,\r\n        this.transfrom,\r\n        this.setting,\r\n        { label: false }\r\n      );\r\n    });\r\n    renderHover(\r\n      this.hoveredNode,\r\n      this.contexts.hover,\r\n      this.transfrom,\r\n      this.setting\r\n    );\r\n    this.contexts.hover.restore();\r\n  }\r\n\r\n  render() {\r\n    this.clear('scene');\r\n    this.contexts.scene.save();\r\n    this.setTransfrom(this.contexts.scene);\r\n    this.manager.graph.links.forEach(link => {\r\n      renderLink(\r\n        link.source as GammaNode,\r\n        link.target as GammaNode,\r\n        this.contexts.scene,\r\n        this.setting\r\n      );\r\n    });\r\n    this.manager.graph.nodes.forEach(node => {\r\n      renderNode(node, this.contexts.scene, this.setting);\r\n    });\r\n\r\n    this.contexts.scene.restore();\r\n\r\n    if(this.option.legend) {\r\n      this.renderLegend();\r\n    }\r\n  }\r\n\r\n  renderLegend() {\r\n    renderLegend(this.option.legend, this.contexts.scene, this.width)\r\n  }\r\n\r\n  clear(cond: true | ContextKeys) {\r\n    const { height } = this.option;\r\n    if (cond === true) {\r\n      for (let context in this.contexts) {\r\n        this.contexts[context as ContextKeys].clearRect(0, 0, this.width, height);\r\n      }\r\n    } else {\r\n      this.contexts[cond].clearRect(0, 0, this.width, height);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Renderer;\r\n","import * as d3 from 'd3';\r\nimport { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\nconst renderNode = (node: GammaNode, context: CanvasRenderingContext2D, setting: Setting) => {\r\n  const nodeSize = node.size || (setting('nodeSize') as number);\r\n  const nodeColor = node.color || (setting('nodeColor') as string);\r\n  context.beginPath();\r\n  context.arc(node.x, node.y, nodeSize, 0, 2 * Math.PI);\r\n  context.closePath();\r\n  context.fillStyle = nodeColor;\r\n  context.fill();\r\n};\r\n\r\nexport default renderNode;\r\n","import { legendItem } from '../types';\r\nexport default (legend: legendItem[], ctx: CanvasRenderingContext2D, width: number) => {\r\n  ctx.save();\r\n  let legendWidth = 0;\r\n  let w = 20;\r\n  let h = 12;\r\n  let top = 10;\r\n  ctx.font = '14px sans-serif';\r\n  const legendDetails = legend.map(l => {\r\n    const textWidth = ctx.measureText(l.name).width;\r\n    const x = legendWidth;\r\n    legendWidth += w + 5 + textWidth + 10;\r\n    return { ...l, textWidth, x };\r\n  });\r\n  const startX = (width - legendWidth) / 2;\r\n  legendDetails.forEach((l, idx) => {\r\n    ctx.fillStyle = l.color;\r\n    ctx.fillRect(startX + l.x, top, w, h);\r\n    ctx.textBaseline = 'middle'\r\n    ctx.fillText(l.name, startX + l.x + w + 5, top + h / 2)\r\n  });\r\n  ctx.restore();\r\n};\r\n","import { forceSimulation, forceManyBody, forceLink, forceCenter, forceX, forceY, forceCollide } from 'd3';\r\nimport { GammaNode, GammaLink, GammaGraph } from './types';\r\n\r\ntype simulationEvent = (this: d3.Simulation<GammaNode, GammaLink>) => void;\r\n\r\nexport default class ForceManager {\r\n  private simulation: d3.Simulation<GammaNode, GammaLink> = forceSimulation();\r\n  private ticks = new Set<simulationEvent>();\r\n  private ends = new Set<simulationEvent>();\r\n  simulationIsRuning = false;\r\n  graph = { nodes: [], links: [] } as GammaGraph;\r\n  constructor() {\r\n    this.simulation\r\n      .force(\r\n        'charge',\r\n        forceManyBody()\r\n          .theta(0.5)\r\n          .distanceMax(1000)\r\n          .strength(-100)\r\n      )\r\n      .force(\r\n        'link',\r\n        forceLink<GammaNode, any>().id(link => link.id).iterations(10)\r\n        .distance(40)\r\n        .strength(.5)\r\n      )\r\n      .force('center', forceCenter())\r\n      .force('collide', forceCollide(6))\r\n      .force('x', forceX().strength(0.1))\r\n      .force('y', forceY().strength(0.1))\r\n      .on('tick', () => {\r\n        this.ticks.forEach(tick => tick.call(this));\r\n      })\r\n      .on('end', () => {\r\n        this.simulationIsRuning = false;\r\n        this.ends.forEach(end => end.call(this));\r\n      });\r\n  }\r\n\r\n  find(x: number, y: number) {\r\n    return this.simulation.find(x, y);\r\n  }\r\n\r\n  layout = (graph: GammaGraph) => {\r\n    this.simulationIsRuning = true;\r\n    this.graph = graph;\r\n    // @ts-ignore\r\n    (this.simulation\r\n      .nodes(graph.nodes)\r\n      .alpha(1)\r\n      .alphaTarget(0)\r\n      .restart()\r\n      .force('link') as d3.ForceLink<GammaNode, GammaLink>).links(graph.links);\r\n  };\r\n\r\n  on(type: 'tick' | 'end', listener: simulationEvent) {\r\n    if (type === 'tick') {\r\n      this.ticks.add(listener);\r\n    } else if (type === 'end') {\r\n      this.ends.add(listener);\r\n    }\r\n  }\r\n\r\n  off(type: 'tick' | 'end', listener: simulationEvent) {\r\n    if (type === 'tick') {\r\n      this.ticks.delete(listener);\r\n    } else if (type === 'end') {\r\n      this.ends.delete(listener);\r\n    }\r\n  }\r\n}\r\n","import { select } from 'd3';\r\nimport Renderer from './Renderer';\r\nimport setSetings, { Settings } from './setting';\r\nimport forceManager from './forceManager';\r\nimport { GammaGraph } from './types';\r\n\r\ninterface legendItem {\r\n  name: string;\r\n  color: string;\r\n}\r\n\r\nexport interface GammaOption {\r\n  graph: GammaGraph;\r\n  container: string;\r\n  graphSettings?: Partial<Settings>;\r\n  forceConfig?: any;\r\n  onEnd?: () => void;\r\n  legend?: legendItem[]\r\n}\r\nexport default class Gamma {\r\n  private width: number;\r\n  private height = 800;\r\n  private renderer: Renderer;\r\n  private manager = new forceManager();\r\n  onEnd = function() {};\r\n  constructor(option?: GammaOption) {\r\n    if (!option.container) {\r\n      console.log('no container');\r\n    }\r\n\r\n    if (option.onEnd) {\r\n      this.onEnd = option.onEnd;\r\n    }\r\n\r\n    select(option.container)\r\n      .selectAll('*')\r\n      .remove();\r\n\r\n    this.manager.layout(option.graph);\r\n\r\n    this.renderer = new Renderer(this.manager, setSetings(option.graphSettings), option.container, {\r\n      width: this.width,\r\n      height: this.height,\r\n      legend: option.legend\r\n    });\r\n  }\r\n\r\n  refreshWithGraph(graph: GammaGraph) {\r\n    this.manager.layout(graph);\r\n  }\r\n}\r\n","import {GammaNode} from './types';\r\n\r\nexport type Setting = <T extends keyof Settings>(name: T) => Settings[T];\r\n\r\nexport interface Settings {\r\n  nodeSize: number;\r\n  nodeColor: string;\r\n  hoverNodeColor: string;\r\n  hoverLabelColor: string;\r\n  hoverLabel: keyof GammaNode;\r\n}\r\n\r\nfunction factory(s: Partial<Settings>){\r\n  const settings: Settings = {\r\n    nodeSize: 3,\r\n    nodeColor: 'green',\r\n    hoverNodeColor: 'green',\r\n    hoverLabelColor: '#333',\r\n    hoverLabel: 'label'\r\n  }\r\n\r\n  Object.assign(settings, s);\r\n\r\n  return function setting<T extends keyof Settings>(name: T): Settings[T] {\r\n    return settings[name]\r\n  }\r\n\r\n}\r\n\r\nexport default factory;\r\n","import Gamma from 'gamma';\r\n\r\n// @ts-ignore\r\nimport data from './data.json';\r\n\r\nfetch('./data.json').then(res => res.json()).then(data => {\r\n  var g = new Gamma({\r\n    graph: { nodes: data.nodes, links: data.links },\r\n    container: '#mount',\r\n    graphSettings: {\r\n      hoverLabel: 'id'\r\n    },\r\n    onEnd() {\r\n      console.log('end');\r\n    },\r\n    legend: [{\r\n      color: 'red',\r\n      name: '老师'\r\n    }, {\r\n      color: 'blue',\r\n      name: '学生'\r\n    }]\r\n  });\r\n  document.addEventListener('dblclick', function(e){\r\n    if(e.target === this.documentElement) {\r\n      fetch('./g.json').then(res => res.json()).then(data => {\r\n        g.refreshWithGraph({nodes: data.nodes, links: data.edges})\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n\r\n"],"names":["renderLink","source","target","ctx","setting","beginPath","moveTo","x","y","lineTo","closePath","strokeStyle","linkColor","stroke","renderHover","node","context","transform","RenderHoverConfig","label","nodeSize","size","hoverNodeColor","color","hoverLabelColor","hoverLabel","arc","Math","PI","fillStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fill","text","fontSize","k","font","fillText","manager","container","option","this","zoom","scaleExtent","on","zooming","bind","zoomIdentity","defaultWidth","parseInt","select","style","width","canvas","append","attr","selectAll","data","enter","height","d","call","filter","item","_a","layerX","layerY","_b","graphX","graphY","nearestNode","find","_this","hoveredTargets","graph","links","link","map","hoveredNode","clear","scene","hover","contexts","translateBy","render","window","addEventListener","Renderer","transfrom","event","simulationIsRuning","translate","scale","save","setTransfrom","forEach","restore","nodes","nodeColor","renderNode","legend","renderLegend","legendWidth","legendDetails","l","textWidth","measureText","name","w","startX","idx","fillRect","textBaseline","top","cond","clearRect","forceSimulation","Set","simulation","alpha","alphaTarget","restart","force","forceManyBody","theta","distanceMax","strength","forceLink","id","iterations","distance","forceCenter","forceCollide","forceX","forceY","ticks","tick","ends","end","ForceManager","type","listener","add","delete","s","settings","forceManager","console","log","onEnd","remove","layout","renderer","graphSettings","Object","assign","Gamma","then","res","json","g","document","e","documentElement","fetch","refreshWithGraph","edges"],"mappings":"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"}