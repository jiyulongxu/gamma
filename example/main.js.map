{"version":3,"file":"main.js","sources":["../src/Renderer/link.ts","../src/Renderer/hover.ts","../src/Renderer/index.ts","../src/Renderer/node.ts","../src/forceManager.ts","../src/gamma.ts","../src/setting.ts","main.ts"],"sourcesContent":["import {SimulationLinkDatum} from 'd3';\nimport { GammaNode } from '../types';\nimport { Setting } from '../setting';\n\nconst renderLink = (\n  source: GammaNode,\n  target: GammaNode,\n  ctx: CanvasRenderingContext2D,\n  setting: Setting\n) => {\n  ctx.beginPath();\n  ctx.moveTo(source.x, source.y)\n  ctx.lineTo(target.x, target.y)\n  ctx.closePath();\n  ctx.strokeStyle = source.linkColor || '#ccc';\n  ctx.stroke()\n};\n\nexport default renderLink;\n","import { GammaNode } from '../types';\nimport { Setting } from '../setting';\n\ninterface RenderHoverConfig {\n  label?: boolean;\n}\n\nconst renderHover = (\n  node: GammaNode,\n  context: CanvasRenderingContext2D,\n  transform: d3.ZoomTransform,\n  setting: Setting,\n  RenderHoverConfig: RenderHoverConfig = { label: true }\n) => {\n  const nodeSize = node.size || setting('nodeSize');\n  const hoverNodeColor = node.color || setting('hoverNodeColor');\n  const hoverLabelColor = setting('hoverLabelColor');\n  const hoverLabel = setting('hoverLabel');\n  context.beginPath();\n  context.arc(node.x, node.y, nodeSize + 1, 0, 2 * Math.PI);\n  context.closePath();\n  context.fillStyle = hoverNodeColor;\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 8;\n  context.shadowColor = '#666';\n  context.fill();\n  if(RenderHoverConfig.label) {\n    const text = node[hoverLabel] as string;\n    if (text) {\n      const fontSize = 14 / transform.k;\n      context.font = `${fontSize}px sans-serif`;\n      context.fillStyle = hoverLabelColor;\n      context.fillText(text, node.x + nodeSize + 2, node.y + fontSize / 3);\n    }\n  }\n};\n\nexport default renderHover;\n","import {\n  Selection,\n  zoom,\n  zoomIdentity,\n  event,\n  select,\n  D3ZoomEvent,\n  Simulation\n} from 'd3';\nimport renderNode from './node';\nimport renderLink from './link';\nimport renderHover from './hover';\nimport ForceManager from '../forceManager';\nimport { GammaGraph, GammaNode } from '../types';\nimport { Setting } from '../setting';\n\ntype ContextKeys = 'hover' | 'scene';\n\ntype Contexts = { [key in ContextKeys]?: CanvasRenderingContext2D };\n\ninterface RenderOption {\n  width: number;\n  height: number;\n}\n\nclass Renderer {\n  private canvas: Selection<HTMLCanvasElement, string, HTMLElement, any>;\n  private zoom = zoom<HTMLCanvasElement, string>()\n    .scaleExtent([0.1, 4])\n    .on('zoom', this.zooming.bind(this));\n  private contexts: Contexts = {};\n  private transfrom = zoomIdentity;\n  private hoveredNode: GammaNode = null;\n  private hoveredTargets: GammaNode[] = [];\n  private selectedSource: GammaNode[] = [];\n  constructor(\n    private manager: ForceManager,\n    private setting: Setting,\n    container: string,\n    private option: RenderOption\n  ) {\n    this.canvas = select(container)\n      .append('div')\n      .attr('class', 'gamma-container')\n      .style('position', 'relative')\n      .selectAll('canvas')\n      .data(['gamma-scene', 'gamma-hover'])\n      .enter()\n      .append('canvas')\n      .style('position', 'absolute')\n      .style('top', 0)\n      .style('left', 0)\n      .attr('width', option.width)\n      .attr('height', option.height)\n      .attr('class', function(d) {\n        return d;\n      })\n      .call(this.zoom);\n\n    this.canvas\n      .filter(item => item === 'gamma-hover')\n      .on('mousemove', () => {\n        const { x, y, k } = this.transfrom;\n        const { layerX, layerY, type } = event;\n        const [graphX, graphY] = [(layerX - x) / k, (layerY - y) / k];\n        const nearestNode = manager.find(graphX, graphY);\n        if ((graphX - nearestNode.x) ** 2 + (graphY - nearestNode.y) ** 2 < 9) {\n          this.hoveredTargets = this.manager.graph.links\n            .filter(link => {\n              return link.source === nearestNode;\n            })\n            .map(link => link.target as GammaNode);\n\n          this.hoveredNode = nearestNode;\n          this.renderHover();\n        } else {\n          this.hoveredNode = null;\n          this.hoveredTargets = [];\n          this.clear('hover');\n        }\n      });\n\n    const [scene, hover] = this.canvas.nodes().map(cvs => cvs.getContext('2d'));\n    this.contexts.scene = scene;\n    this.contexts.hover = hover;\n    this.zoom.translateBy(this.canvas, option.width / 2, option.height / 2);\n\n    manager.on('tick', () => {\n      this.render();\n      this.hoveredNode && this.renderHover();\n    });\n  }\n\n  zooming() {\n    this.transfrom = (event as D3ZoomEvent<HTMLCanvasElement, any>).transform;\n    if (!this.manager.simulationIsRuning) {\n      this.render();\n    }\n    this.hoveredNode && this.renderHover();\n  }\n\n  setTransfrom(ctx: CanvasRenderingContext2D) {\n    const { x, y, k } = this.transfrom;\n    ctx.translate(x, y);\n    ctx.scale(k, k);\n  }\n\n  renderHover() {\n    this.clear('hover');\n    this.contexts.hover.save();\n    this.setTransfrom(this.contexts.hover);\n    this.hoveredTargets.forEach(node => {\n      renderLink(\n        { ...this.hoveredNode, linkColor: 'pink' },\n        node,\n        this.contexts.hover,\n        this.setting\n      );\n      renderHover(\n        { ...node, color: 'pink' },\n        this.contexts.hover,\n        this.transfrom,\n        this.setting,\n        { label: false }\n      );\n    });\n    renderHover(\n      this.hoveredNode,\n      this.contexts.hover,\n      this.transfrom,\n      this.setting\n    );\n    this.contexts.hover.restore();\n  }\n\n  render() {\n    this.contexts.scene.clearRect(0, 0, this.option.width, this.option.height);\n    this.contexts.scene.save();\n    this.setTransfrom(this.contexts.scene);\n    this.manager.graph.links.forEach(link => {\n      renderLink(\n        link.source as GammaNode,\n        link.target as GammaNode,\n        this.contexts.scene,\n        this.setting\n      );\n    });\n    this.manager.graph.nodes.forEach(node => {\n      renderNode(node, this.contexts.scene, this.setting);\n    });\n    this.contexts.scene.restore();\n  }\n\n  clear(cond: true | ContextKeys) {\n    const { width, height } = this.option;\n    if (cond === true) {\n      for (let context in this.contexts) {\n        this.contexts[context as ContextKeys].clearRect(0, 0, width, height);\n      }\n    } else {\n      this.contexts[cond].clearRect(0, 0, width, height);\n    }\n  }\n}\n\nexport default Renderer;\n","import * as d3 from 'd3';\nimport { GammaNode } from '../types';\nimport { Setting } from '../setting';\n\nconst renderNode = (node: GammaNode, context: CanvasRenderingContext2D, setting: Setting) => {\n  const nodeSize = node.size || (setting('nodeSize') as number);\n  const nodeColor = node.color || (setting('nodeColor') as string);\n  context.beginPath();\n  context.arc(node.x, node.y, nodeSize, 0, 2 * Math.PI);\n  context.closePath();\n  context.fillStyle = nodeColor;\n  context.fill();\n};\n\nexport default renderNode;\n","import { forceSimulation, forceManyBody, forceLink, forceCenter, forceX, forceY, forceCollide } from 'd3';\nimport { GammaNode, GammaLink, GammaGraph } from './types';\n\ntype simulationEvent = (this: d3.Simulation<GammaNode, GammaLink>) => void;\n\nexport default class ForceManager {\n  private simulation: d3.Simulation<GammaNode, GammaLink> = forceSimulation();\n  private ticks = new Set<simulationEvent>();\n  private ends = new Set<simulationEvent>();\n  simulationIsRuning = false;\n  graph = { nodes: [], links: [] } as GammaGraph;\n  constructor() {\n    this.simulation\n      .force(\n        'charge',\n        forceManyBody()\n          .theta(0.5)\n          .distanceMax(1000)\n          .strength(-100)\n      )\n      .force(\n        'link',\n        forceLink<GammaNode, any>().id(link => link.id).iterations(10)\n        .distance(40)\n        .strength(.5)\n      )\n      .force('center', forceCenter())\n      .force('collide', forceCollide(6))\n      .force('x', forceX().strength(0.1))\n      .force('y', forceY().strength(0.1))\n      .on('tick', () => {\n        this.ticks.forEach(tick => tick.call(this));\n      })\n      .on('end', () => {\n        this.simulationIsRuning = false;\n        this.ends.forEach(end => end.call(this));\n      });\n  }\n\n  find(x: number, y: number) {\n    return this.simulation.find(x, y);\n  }\n\n  layout = (graph: GammaGraph) => {\n    this.simulationIsRuning = true;\n    this.graph = graph;\n    // @ts-ignore\n    (this.simulation\n      .nodes(graph.nodes)\n      .alpha(1)\n      .alphaTarget(0)\n      .restart()\n      .force('link') as d3.ForceLink<GammaNode, GammaLink>).links(graph.links);\n  };\n\n  on(type: 'tick' | 'end', listener: simulationEvent) {\n    if (type === 'tick') {\n      this.ticks.add(listener);\n    } else if (type === 'end') {\n      this.ends.add(listener);\n    }\n  }\n\n  off(type: 'tick' | 'end', listener: simulationEvent) {\n    if (type === 'tick') {\n      this.ticks.delete(listener);\n    } else if (type === 'end') {\n      this.ends.delete(listener);\n    }\n  }\n}\n","import { select } from 'd3';\nimport Renderer from './Renderer';\nimport setSetings, { Settings } from './setting';\nimport forceManager from './forceManager';\nimport { GammaGraph } from './types';\n\nexport interface GammaOption {\n  graph: GammaGraph;\n  container: string;\n  graphSettings?: Partial<Settings>;\n  forceConfig?: any;\n  onEnd?: () => void;\n}\nexport default class Gamma {\n  private width = 800;\n  private height = 800;\n  private renderer: Renderer;\n  private manager = new forceManager();\n  onEnd = function() {};\n  constructor(option?: GammaOption) {\n    if (!option.container) {\n      console.log('no container');\n    }\n\n    if (option.onEnd) {\n      this.onEnd = option.onEnd;\n    }\n\n    select(option.container)\n      .selectAll('*')\n      .remove();\n\n    this.manager.layout(option.graph);\n\n    this.renderer = new Renderer(this.manager, setSetings(option.graphSettings), option.container, {\n      width: this.width,\n      height: this.height\n    });\n  }\n\n  refreshWithGraph(graph: GammaGraph) {\n    this.manager.layout(graph);\n  }\n}\n","import {GammaNode} from './types';\n\nexport type Setting = <T extends keyof Settings>(name: T) => Settings[T];\n\nexport interface Settings {\n  nodeSize: number;\n  nodeColor: string;\n  hoverNodeColor: string;\n  hoverLabelColor: string;\n  hoverLabel: keyof GammaNode;\n}\n\nfunction factory(s: Partial<Settings>){\n  const settings: Settings = {\n    nodeSize: 3,\n    nodeColor: 'green',\n    hoverNodeColor: 'green',\n    hoverLabelColor: '#333',\n    hoverLabel: 'label'\n  }\n\n  Object.assign(settings, s);\n\n  return function setting<T extends keyof Settings>(name: T): Settings[T] {\n    return settings[name]\n  }\n\n}\n\nexport default factory;\n","import Gamma from 'gamma';\n\n// @ts-ignore\nimport data from './data.json';\n\nfetch('./data.json').then(res => res.json()).then(data => {\n  var g = new Gamma({\n    graph: { nodes: data.nodes, links: data.links },\n    container: '#mount',\n    graphSettings: {\n      hoverLabel: 'id'\n    },\n    onEnd() {\n      console.log('end');\n    }\n  });\n  document.addEventListener('dblclick', function(e){\n    if(e.target === this.documentElement) {\n      fetch('./g.json').then(res => res.json()).then(data => {\n        g.refreshWithGraph({nodes: data.nodes, links: data.edges})\n      })\n    }\n  })\n})\n\n\n"],"names":["renderLink","source","target","ctx","setting","beginPath","moveTo","x","y","lineTo","closePath","strokeStyle","linkColor","stroke","renderHover","node","context","transform","RenderHoverConfig","label","nodeSize","size","hoverNodeColor","color","hoverLabelColor","hoverLabel","arc","Math","PI","fillStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fill","text","fontSize","k","font","fillText","manager","container","option","this","zoom","scaleExtent","on","zooming","bind","zoomIdentity","canvas","select","append","attr","style","selectAll","data","enter","width","height","d","call","filter","item","_a","layerX","layerY","_b","graphX","graphY","nearestNode","find","_this","hoveredTargets","graph","links","link","map","hoveredNode","clear","scene","hover","contexts","translateBy","render","Renderer","transfrom","event","simulationIsRuning","translate","scale","save","setTransfrom","forEach","restore","clearRect","nodes","nodeColor","renderNode","cond","forceSimulation","Set","simulation","alpha","alphaTarget","restart","force","forceManyBody","theta","distanceMax","strength","forceLink","id","iterations","distance","forceCenter","forceCollide","forceX","forceY","ticks","tick","ends","end","ForceManager","type","listener","add","delete","s","settings","forceManager","console","log","onEnd","remove","layout","renderer","graphSettings","Object","assign","name","Gamma","fetch","then","res","json","g","document","addEventListener","e","documentElement","refreshWithGraph","edges"],"mappings":"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"}