{"version":3,"file":"main.js","sources":["../src/Renderer/link.ts","../src/Renderer/hover.ts","../src/Renderer/index.ts","../src/Renderer/node.ts","../src/Renderer/legend.ts","../src/forceManager.ts","../src/gamma.ts","../src/setting.ts","main.ts"],"sourcesContent":["import {SimulationLinkDatum} from 'd3';\r\nimport { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\nconst renderLink = (\r\n  source: GammaNode,\r\n  target: GammaNode,\r\n  ctx: CanvasRenderingContext2D,\r\n  setting: Setting\r\n) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(source.x, source.y)\r\n  ctx.lineTo(target.x, target.y)\r\n  ctx.closePath();\r\n  ctx.strokeStyle = source.linkColor || '#ccc';\r\n  ctx.stroke()\r\n};\r\n\r\nexport default renderLink;\r\n","import { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\ninterface RenderHoverConfig {\r\n  label?: boolean;\r\n}\r\n\r\nconst renderHover = (\r\n  node: GammaNode,\r\n  context: CanvasRenderingContext2D,\r\n  transform: d3.ZoomTransform,\r\n  setting: Setting,\r\n  RenderHoverConfig: RenderHoverConfig = { label: true }\r\n) => {\r\n  const nodeSize = node.size || setting('nodeSize');\r\n  const hoverNodeColor = node.color || setting('hoverNodeColor');\r\n  const hoverLabelColor = setting('hoverLabelColor');\r\n  const hoverLabel = setting('hoverLabel');\r\n  context.beginPath();\r\n  context.arc(node.x, node.y, nodeSize + 1, 0, 2 * Math.PI);\r\n  context.closePath();\r\n  context.fillStyle = hoverNodeColor;\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 0;\r\n  context.shadowBlur = 8;\r\n  context.shadowColor = '#666';\r\n  context.fill();\r\n  if(RenderHoverConfig.label) {\r\n    const text = node[hoverLabel] as string;\r\n    if (text) {\r\n      const fontSize = 14 / transform.k;\r\n      context.font = `${fontSize}px sans-serif`;\r\n      context.fillStyle = hoverLabelColor;\r\n      context.fillText(text, node.x + nodeSize + 2, node.y + fontSize / 3);\r\n    }\r\n  }\r\n};\r\n\r\nexport default renderHover;\r\n","import { Selection, zoom, zoomIdentity, event, select, D3ZoomEvent } from 'd3';\r\nimport renderNode from './node';\r\nimport renderLink from './link';\r\nimport renderHover from './hover';\r\nimport renderLegend from './legend';\r\nimport ForceManager from '../forceManager';\r\nimport { GammaGraph, GammaNode, legendItem, Tooltip, Overall, GammaLink } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\ntype ContextKeys = 'hover' | 'scene';\r\n\r\ntype Contexts = { [key in ContextKeys]?: CanvasRenderingContext2D };\r\n\r\ninterface RenderOption<N> {\r\n  width?: number;\r\n  height: number;\r\n  legend?: legendItem[];\r\n  tooltip?: Tooltip<N>;\r\n  overall?: Overall<N>;\r\n}\r\n\r\nclass Renderer<N extends GammaNode> {\r\n  private canvas: Selection<HTMLCanvasElement, string, HTMLElement, any>;\r\n  private zoom = zoom<HTMLCanvasElement, string>()\r\n    .scaleExtent([0.1, 4])\r\n    .on('zoom', this.zooming.bind(this));\r\n  private contexts: Contexts = {};\r\n  private transform = zoomIdentity;\r\n  private hoveredNode: N = null;\r\n  private hoveredTargets: N[] = [];\r\n  private width!: number;\r\n  private height!: number;\r\n  private viewFited = false;\r\n  private tooltip: d3.Selection<HTMLPreElement, any, any, any>;\r\n  private overall: d3.Selection<HTMLDivElement, any, any, any>;\r\n  private tooltipFormat = function(node: N) {\r\n    return JSON.stringify(node, null, 2);\r\n  };\r\n  private overallFormat = function(this: Renderer<N>, graph: GammaGraph<N>) {\r\n    return `节点总数：${\r\n      graph.nodes.length\r\n    }<br>transform:<br>x:${\r\n      this.transform.x\r\n    }<br>y:${\r\n      this.transform.y\r\n    }<br>k:${\r\n      this.transform.k\r\n    }`;\r\n  };\r\n  constructor(\r\n    private manager: ForceManager<N>,\r\n    private setting: Setting,\r\n    private container: string,\r\n    private option: RenderOption<N>\r\n  ) {\r\n    const defaultWidth = parseInt(select(container).style('width'));\r\n    if (option.tooltip && option.tooltip.format) {\r\n      this.tooltipFormat = option.tooltip.format;\r\n    }\r\n    if (option.overall && option.overall.format) {\r\n      this.overallFormat = option.overall.format;\r\n    }\r\n    this.width = option.width || defaultWidth;\r\n    this.height = option.height || 500;\r\n    this.canvas = select(container)\r\n      .append('div')\r\n      .attr('class', 'gamma-container')\r\n      .style('height', `${this.height}px`)\r\n      .style('position', 'relative')\r\n      .selectAll('canvas')\r\n      .data(['gamma-scene', 'gamma-hover'])\r\n      .enter()\r\n      .append('canvas')\r\n      .style('position', 'absolute')\r\n      .style('top', 0)\r\n      .style('left', 0)\r\n      .attr('width', this.width)\r\n      .attr('height', this.height)\r\n      .attr('class', function(d) {\r\n        return d;\r\n      })\r\n      .call(this.zoom);\r\n\r\n    this.tooltip = select(container)\r\n      .select('.gamma-container')\r\n      .append('pre')\r\n      .style('position', 'absolute')\r\n      .style('display', 'none')\r\n      .style('top', 0)\r\n      .style('right', 0)\r\n      .style('width', '300px');\r\n\r\n    this.overall = select(container)\r\n      .select('.gamma-container')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('left', 0)\r\n      .style('bottom', 0)\r\n      .style('width', '250px')\r\n      .style('padding', '10px');\r\n\r\n    this.canvas.filter(item => item === 'gamma-hover').on('mousemove click', this.handleMouse);\r\n\r\n    const [scene, hover] = this.canvas.nodes().map(cvs => cvs.getContext('2d'));\r\n    this.contexts.scene = scene;\r\n    this.contexts.hover = hover;\r\n    this.zoom.translateBy(this.canvas, this.width / 2, this.height / 2);\r\n\r\n    manager\r\n      .on('tick', () => {\r\n        this.render();\r\n        this.hoveredNode && this.renderHover();\r\n      })\r\n      .on('layout', () => {\r\n        this.tooltip.style('display', 'none');\r\n        this.overall.html(this.overallFormat(this.manager.graph));\r\n      });\r\n\r\n    window.addEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    const width = parseInt(select(this.container).style('width'));\r\n    this.zoom.translateBy(this.canvas, (width - this.width) / 2, 0);\r\n    this.width = this.option.width || width;\r\n    this.canvas.attr('width', this.width);\r\n    this.render();\r\n  };\r\n\r\n  handleMouse = () => {\r\n    const { x, y, k } = this.transform;\r\n    const { layerX, layerY, type } = event;\r\n    const [graphX, graphY] = [(layerX - x) / k, (layerY - y) / k];\r\n    const nearestNode = this.manager.find(graphX, graphY);\r\n    const size = nearestNode.size || this.setting('nodeSize');\r\n    if ((graphX - nearestNode.x) ** 2 + (graphY - nearestNode.y) ** 2 <= size ** 2) {\r\n      this.hoveredTargets = this.manager.graph.links\r\n        .filter(link => {\r\n          return link.source === nearestNode;\r\n        })\r\n        .map(link => link.target as N);\r\n\r\n      this.hoveredNode = nearestNode;\r\n      this.renderHover();\r\n      if (type === 'click') {\r\n        this.tooltip.style('display', 'block').text(this.tooltipFormat(nearestNode));\r\n      }\r\n    } else {\r\n      this.hoveredNode = null;\r\n      this.hoveredTargets = [];\r\n      this.clear('hover');\r\n      if (type === 'click') {\r\n        this.tooltip.style('display', 'none');\r\n      }\r\n    }\r\n  };\r\n\r\n  zooming() {\r\n    this.transform = (event as D3ZoomEvent<HTMLCanvasElement, any>).transform;\r\n    if (!this.manager.simulationIsRuning) {\r\n      this.render();\r\n    }\r\n    this.hoveredNode && this.renderHover();\r\n  }\r\n\r\n  setTransfrom(ctx: CanvasRenderingContext2D) {\r\n    this.overall.html(this.overallFormat(this.manager.graph))\r\n    const { x, y, k } = this.transform;\r\n    ctx.translate(x, y);\r\n    ctx.scale(k, k);\r\n  }\r\n\r\n  renderHover() {\r\n    this.clear('hover');\r\n    this.contexts.hover.save();\r\n    this.setTransfrom(this.contexts.hover);\r\n    this.hoveredTargets.forEach(node => {\r\n      renderLink({ ...this.hoveredNode, linkColor: 'pink' }, node, this.contexts.hover, this.setting);\r\n      renderHover({ ...node, color: 'pink' }, this.contexts.hover, this.transform, this.setting, { label: false });\r\n    });\r\n    renderHover(this.hoveredNode, this.contexts.hover, this.transform, this.setting);\r\n    this.contexts.hover.restore();\r\n  }\r\n\r\n  render() {\r\n    this.clear('scene');\r\n    this.contexts.scene.save();\r\n    this.setTransfrom(this.contexts.scene);\r\n    this.manager.graph.links.forEach(link => {\r\n      renderLink(link.source as GammaNode, link.target as GammaNode, this.contexts.scene, this.setting);\r\n    });\r\n    let maxX = 0;\r\n    let maxY = 0;\r\n    let minX = 0;\r\n    let minY = 0;\r\n    this.manager.graph.nodes.forEach(node => {\r\n      maxX = maxX > node.x ? maxX : node.x;\r\n      maxY = maxY > node.y ? maxY : node.y;\r\n      minX = minX < node.x ? minX : node.x;\r\n      minY = minY < node.y ? minY : node.y;\r\n\r\n      renderNode(node, this.contexts.scene, this.setting);\r\n    });\r\n    if (this.manager.simulationIsRuning && !this.viewFited && minY + this.height / 2 / this.transform.k < 0) {\r\n      console.log(this.height / 2 / minY);\r\n      this.viewFited = true;\r\n      this.zoom.scaleTo(this.canvas.transition(), -this.height / 2 / minY);\r\n    }\r\n\r\n    this.contexts.scene.restore();\r\n\r\n    if (this.option.legend) {\r\n      this.renderLegend();\r\n    }\r\n  }\r\n\r\n  renderLegend() {\r\n    renderLegend(this.option.legend, this.contexts.scene, this.width);\r\n  }\r\n\r\n  clear(cond: true | ContextKeys) {\r\n    const { height } = this.option;\r\n    if (cond === true) {\r\n      for (let context in this.contexts) {\r\n        this.contexts[context as ContextKeys].clearRect(0, 0, this.width, height);\r\n      }\r\n    } else {\r\n      this.contexts[cond].clearRect(0, 0, this.width, height);\r\n    }\r\n  }\r\n\r\n  destory() {\r\n    window.removeEventListener('resize', this.resize);\r\n    this.zoom.on('zoom', null);\r\n    this.canvas.filter(item => item === 'gamma-hover').on('mousemove click', null);\r\n  }\r\n}\r\n\r\nexport default Renderer;\r\n","import * as d3 from 'd3';\r\nimport { GammaNode } from '../types';\r\nimport { Setting } from '../setting';\r\n\r\nconst renderNode = (node: GammaNode, context: CanvasRenderingContext2D, setting: Setting) => {\r\n  const nodeSize = node.size || (setting('nodeSize') as number);\r\n  const nodeColor = node.color || (setting('nodeColor') as string);\r\n  context.beginPath();\r\n  context.arc(node.x, node.y, nodeSize, 0, 2 * Math.PI);\r\n  context.closePath();\r\n  context.fillStyle = nodeColor;\r\n  context.fill();\r\n};\r\n\r\nexport default renderNode;\r\n","import { legendItem } from '../types';\r\nexport default (legend: legendItem[], ctx: CanvasRenderingContext2D, width: number) => {\r\n  ctx.save();\r\n  let legendWidth = 0;\r\n  let w = 20;\r\n  let h = 12;\r\n  let top = 10;\r\n  ctx.font = '14px sans-serif';\r\n  const legendDetails = legend.map(l => {\r\n    const textWidth = ctx.measureText(l.name).width;\r\n    const x = legendWidth;\r\n    legendWidth += w + 5 + textWidth + 10;\r\n    return { ...l, textWidth, x };\r\n  });\r\n  const startX = (width - legendWidth) / 2;\r\n  legendDetails.forEach((l, idx) => {\r\n    ctx.fillStyle = l.color;\r\n    ctx.fillRect(startX + l.x, top, w, h);\r\n    ctx.textBaseline = 'middle'\r\n    ctx.fillText(l.name, startX + l.x + w + 5, top + h / 2)\r\n  });\r\n  ctx.restore();\r\n};\r\n","import { forceSimulation, forceManyBody, forceLink, forceCenter, forceX, forceY, forceCollide } from 'd3';\r\nimport { GammaNode, GammaLink, GammaGraph } from './types';\r\n\r\ntype simulationEvent = <N>(this: d3.Simulation<N, GammaLink<N>>) => void;\r\n\r\nexport default class ForceManager<N extends GammaNode> {\r\n  private simulation: d3.Simulation<N, GammaLink<N>> = forceSimulation();\r\n  private ticks = new Set<simulationEvent>();\r\n  private ends = new Set<simulationEvent>();\r\n  private layouts = new Set<simulationEvent>();\r\n  simulationIsRuning = false;\r\n  graph = { nodes: [], links: [] } as GammaGraph<N>;\r\n  constructor() {\r\n    this.simulation\r\n      .force(\r\n        'charge',\r\n        forceManyBody()\r\n          .theta(0.5)\r\n          .distanceMax(1000)\r\n          .strength(-100)\r\n      )\r\n      .force(\r\n        'link',\r\n        forceLink<N, any>()\r\n          .id(link => link.id)\r\n          .iterations(10)\r\n          .distance(40)\r\n          .strength(0.5)\r\n      )\r\n      .force('center', forceCenter())\r\n      .force('collide', forceCollide(6))\r\n      .force('x', forceX().strength(0.1))\r\n      .force('y', forceY().strength(0.1))\r\n      .on('tick', () => {\r\n        this.ticks.forEach(tick => tick.call(this));\r\n      })\r\n      .on('end', () => {\r\n        this.simulationIsRuning = false;\r\n        this.ends.forEach(end => end.call(this));\r\n      });\r\n  }\r\n\r\n  destory() {\r\n    this.simulation.on('tick', null).on('end', null);\r\n  }\r\n\r\n  find(x: number, y: number) {\r\n    return this.simulation.find(x, y);\r\n  }\r\n\r\n  layout = (graph: GammaGraph<N>) => {\r\n    this.simulationIsRuning = true;\r\n    this.graph = graph;\r\n    (this.simulation\r\n      .nodes(graph.nodes)\r\n      .alpha(1)\r\n      .alphaTarget(0)\r\n      .restart()\r\n      .force('link') as d3.ForceLink<GammaNode, GammaLink<N>>).links(graph.links);\r\n    this.layouts.forEach(fn => fn.call(this));\r\n  };\r\n\r\n  on(type: 'tick' | 'end' | 'layout', listener: simulationEvent) {\r\n    if (type === 'tick') {\r\n      this.ticks.add(listener);\r\n    } else if (type === 'end') {\r\n      this.ends.add(listener);\r\n    } else if (type === 'layout') {\r\n      this.layouts.add(listener);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  off(type: 'tick' | 'end' | 'layout', listener: simulationEvent) {\r\n    if (type === 'tick') {\r\n      this.ticks.delete(listener);\r\n    } else if (type === 'end') {\r\n      this.ends.delete(listener);\r\n    } else if (type === 'layout') {\r\n      this.layouts.delete(listener);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","import { select } from 'd3';\r\nimport Renderer from './Renderer';\r\nimport setSetings, { Settings } from './setting';\r\nimport forceManager from './forceManager';\r\nimport { GammaGraph, Tooltip, Overall, GammaNode, GammaLink } from './types';\r\n\r\ninterface legendItem {\r\n  name: string;\r\n  color: string;\r\n}\r\n\r\nexport interface GammaOption<N extends GammaNode> {\r\n  graph: GammaGraph<N>;\r\n  container: string;\r\n  graphSettings?: Partial<Settings>;\r\n  forceConfig?: any;\r\n  width?: number;\r\n  height?: number;\r\n  onEnd?: () => void;\r\n  legend?: legendItem[],\r\n  tooltip?: Tooltip<N>;\r\n  overall?: Overall<N>\r\n}\r\nexport default class Gamma<N extends GammaNode> {\r\n  private width: number;\r\n  private height = 800;\r\n  private renderer: Renderer<N>;\r\n  private manager = new forceManager<N>();\r\n  onEnd = function() {};\r\n  constructor(option?: GammaOption<N>) {\r\n    if (!option.container) {\r\n      console.log('no container');\r\n    }\r\n\r\n    if(option.height) {\r\n      this.height = option.height;\r\n    }\r\n\r\n    if (option.onEnd) {\r\n      this.onEnd = option.onEnd;\r\n    }\r\n\r\n    select(option.container)\r\n      .selectAll('*')\r\n      .remove();\r\n\r\n      \r\n      this.renderer = new Renderer(this.manager, setSetings(option.graphSettings), option.container, {\r\n        width: this.width,\r\n        height: this.height,\r\n        legend: option.legend,\r\n        tooltip: option.tooltip,\r\n        overall: option.overall\r\n      });\r\n\r\n      this.manager.layout(option.graph);\r\n  }\r\n\r\n  refreshWithGraph(graph: GammaGraph<N>) {\r\n    this.manager.layout(graph);\r\n  }\r\n\r\n  destory() {\r\n    this.renderer.destory();\r\n    this.manager.destory();\r\n  }\r\n}\r\n","import {GammaNode} from './types';\r\n\r\nexport type Setting = <T extends keyof Settings>(name: T) => Settings[T];\r\n\r\nexport interface Settings {\r\n  nodeSize: number;\r\n  nodeColor: string;\r\n  hoverNodeColor: string;\r\n  hoverLabelColor: string;\r\n  hoverLabel: keyof GammaNode;\r\n}\r\n\r\nfunction factory(s: Partial<Settings>){\r\n  const settings: Settings = {\r\n    nodeSize: 3,\r\n    nodeColor: 'green',\r\n    hoverNodeColor: 'green',\r\n    hoverLabelColor: '#333',\r\n    hoverLabel: 'label'\r\n  }\r\n\r\n  Object.assign(settings, s);\r\n\r\n  return function setting<T extends keyof Settings>(name: T): Settings[T] {\r\n    return settings[name]\r\n  }\r\n\r\n}\r\n\r\nexport default factory;\r\n","import Gamma from 'gamma';\r\nimport {GammaNode, GammaLink} from '../src/types'\r\n\r\ninterface CustomNode extends GammaNode {\r\n  test: 'string'\r\n}\r\n\r\nfetch('./g.json').then(res => res.json()).then(data => {\r\n  var g = new Gamma<CustomNode>({\r\n    graph: { nodes: data.nodes, links: data.edges },\r\n    container: '#mount',\r\n    graphSettings: {\r\n      hoverLabel: 'id'\r\n    },\r\n    height: 500,\r\n    onEnd() {\r\n      console.log('end');\r\n    },\r\n    legend: [{\r\n      color: 'red',\r\n      name: '老师'\r\n    }, {\r\n      color: 'blue',\r\n      name: '学生'\r\n    }],\r\n    tooltip: {\r\n      format(node) {\r\n        return JSON.stringify(node, null, 2)\r\n      }\r\n    }\r\n  });\r\n  // @ts-ignore 调试\r\n  window.g = g;\r\n})\r\n\r\n\r\n"],"names":["renderLink","source","target","ctx","setting","beginPath","moveTo","x","y","lineTo","closePath","strokeStyle","linkColor","stroke","renderHover","node","context","transform","RenderHoverConfig","label","nodeSize","size","hoverNodeColor","color","hoverLabelColor","hoverLabel","arc","Math","PI","fillStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fill","text","fontSize","k","font","fillText","manager","container","option","this","zoom","scaleExtent","on","zooming","bind","zoomIdentity","JSON","stringify","graph","nodes","length","width","parseInt","select","_this","style","translateBy","canvas","attr","render","_a","layerX","layerY","type","_b","graphX","graphY","nearestNode","find","hoveredTargets","links","filter","link","map","hoveredNode","tooltip","tooltipFormat","clear","defaultWidth","format","overall","overallFormat","height","append","selectAll","data","enter","d","call","item","handleMouse","scene","hover","contexts","html","window","addEventListener","resize","Renderer","event","simulationIsRuning","translate","scale","save","setTransfrom","forEach","restore","maxX","maxY","minX","minY","nodeColor","renderNode","viewFited","console","log","scaleTo","transition","legend","renderLegend","legendWidth","legendDetails","l","textWidth","measureText","name","w","startX","idx","fillRect","textBaseline","top","cond","clearRect","removeEventListener","forceSimulation","Set","simulation","alpha","alphaTarget","restart","force","layouts","fn","forceManyBody","theta","distanceMax","strength","forceLink","id","iterations","distance","forceCenter","forceCollide","forceX","forceY","ticks","tick","ends","end","ForceManager","listener","add","delete","s","settings","forceManager","onEnd","remove","renderer","graphSettings","Object","assign","layout","Gamma","destory","then","res","json","g","edges"],"mappings":"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"}